# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
alias vim=nvim
alias v=vim .
alias keys="vim $HOME/.vimkeys.vimrc"
alias keys="vim $HOME/keys.vimrc"
alias dc=docker-compose
alias n="nautilus"
alias mbs="cd $HOME/git_repos/mybondsite/backend;"
<<<<<<< HEAD
alias kaf="cd $HOME/git_repos/kafka/code;"
=======
alias kaf="cd $HOME/git_repos/kafga/code;"
>>>>>>> 0afbdfcce6dfaa6fe5c0761f2af8d791294588ad

alias k="kubectl"
alias ksetup="source <(kubectl completion zsh)"
alias kc="kubectl create"
alias kgp="kubectl get pods -owide --all-namespaces --show-all"
alias kdd="kubectl delete deployment"
alias md='eval $(minikube docker-env)'
alias minikubedockerexit='eval $(minikube docker-env -u)'
alias minikuberestart='(minikube stop;  minikube start)'
alias reload='exec $SHELL -l'
alias pj='cd ~/git_repos/psychicjenha/frontend'
alias tk='cd ~/workspace/dev-environments/kubernetes-environments'
alias set="source <(kubectl completion zsh)"
alias pa="pyenv activate data-science; python"
alias config="vim ~/.zpreztorc;"
alias python=ipython
alias edit='vim ~/.zpreztorc'
eval $(thefuck --alias f)
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

alias gitalias='vim $HOME/.zprezto/modules/git/alias.zsh'
alias gst="git status"
alias gp="git pull"
alias kafcreate='hello'

#temps
<<<<<<< HEAD
alias ipyvim='pyenv activate neovim3; ipython kernel; watch'
=======
>>>>>>> 0afbdfcce6dfaa6fe5c0761f2af8d791294588ad
alias es='cd ~/workspace/tal_big_data/reports/2017-06_grad_big_data/'
alias sickd='cd ~/workspace/dev-environments/kubernetes-environments/environment/roles/s4f-sick-integration-service/'
alias adapt='cd ~/workspace/tal/tal/services/adaptris/test/;'
alias ss='cd ~/workspace/s4f-sick-integration-service/'
alias gogo='cd ~/git_repos/kafga/code && ./commands.py'
#end temps
#
export PIP_REQUIRE_VIRTUALENV=true
export TA=$HOME/workspace/dev-environments/kubernetes-environments/environment/roles/
export TP=$HOME/workspace/dev-environments/kubernetes-environments/environment/patches/development/
export PATH=$PATH:/opt/hub-linux-amd64-2.3.0-pre9/bin/
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
setopt correct
unsetopt correctall

zstyle ':prezto:load' pmodule \
         'environment' \
         'terminal' \
         'editor' \
         'history' \
         'directory' \
         'spectrum' \
         'utility' \
         'completion' \
         'git' \
         'syntax-highlighting' \
         'history-substring-search' \
         'prompt'
zstyle ':prezto:module:prompt' theme 'agnoster'
savehelp() {
  echo "$@[2,-1]" >> $HOME/git_repos/craig_help/$1
}
envv() {
  if [[ $# -eq 0 ]]
    then
      env
    else
      env | grep -i $1
  fi
}
kin () {
  kubectl run -i --tty temp --image=$1 --restart=Never -- sh
}
restartn() {
  sudo service networking restart;
  sudo service network-manager restart;
}
pullta() {
  a=$(git status | grep -c "modified")
  if [[ $a > 0 ]]
  then
    echo ''
    echo 'you have changes';
    echo ''
  else
    git pull
  fi
}

checkta() {
  for foldr in ~/workspace/*/;
    do
      cd foldr;
      echo "$foldr"
      git fetch;
      pullta
    done;
}

dcc() {
  dc ps | grep Exit
}
dcu() {
  dc up -d --force-recreate $1
}
odev() {
cd workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/dev-environments/docker-environment/collections/shared/wms-staging/
}
dev() {
cd ~/workspace/cdev/$1
}

devup() {
cd ~/workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/cdev/$1
dc up --force-recreate;
}
h() {
  cd ~/git_repos/craig_help
  ls;
}
devad() {
cd ~/workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/cdev/adaptris
dc exec adaptris pip install pytest pytest-watch;
dc exec adaptris bash -c 'cd tal/services/adaptris/test; ptw -- -x --lf;';
}

code-on() {
  git checkout -b $1 origin/master
}


gpush() {
  local branch=`git rev-parse --abbrev-ref HEAD`
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
  git push origin HEAD:$branch $@
}
gpr() {
  local branch=`git rev-parse --abbrev-ref HEAD`
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
  git push origin HEAD:$branch || return 1
  hub pull-request -h $branch
}
grelease() {
  local branch=`git rev-parse --abbrev-ref HEAD`
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
  git pull --rebase || return 1
# squash your commits into sensible chunks
  git rebase -i
  git push origin HEAD:$branch -f || return 1
  git push origin HEAD:master || return 1
  git checkout master || return 1
  git push origin :$branch || return 1
  git branch -d $branch || return 1
}

# function that will compose two other commands
#kafka commands
KRun() {
  docker run --rm -it --net=host landoop/fast-data-dev bash -c -
}
KCreate() {
  cat "kafka-topics --zookeeper 127.0.0.1:2181 --create --topic $1 --partitions 3 --replication-factor 1" | sed 's_$1_'$1'_' | KRun -
}

# Auto convert .... to ../..
# zstyle ':prezto:module:editor' dot-expansion 'yes'

# Allow the zsh prompt context to be shown.
#zstyle ':prezto:module:editor' ps-context 'yes'

#
# Git
#

# Ignore submodules when they are 'dirty', 'untracked', 'all', or 'none'.
# zstyle ':prezto:module:git:status:ignore' submodules 'all'

#
# GNU Utility
#

# Set the command prefix on non-GNU systems.
# zstyle ':prezto:module:gnu-utility' prefix 'g'

#
# History Substring Search
#

# Set the query found color.
# zstyle ':prezto:module:history-substring-search:color' found ''

# Set the query not found color.
# zstyle ':prezto:module:history-substring-search:color' not-found ''

# Set the search globbing flags.
# zstyle ':prezto:module:history-substring-search' globbing-flags ''

#
# Pacman
#

# Set the Pacman frontend.
# zstyle ':prezto:module:pacman' frontend 'yaourt'

#
# Prompt
#

# Set the prompt theme to load.
# Setting it to 'random' loads a random theme.
# Auto set to 'off' on dumb terminals.

# Set how themes that use promptpwd function display the pwd, can be 'short', 'long', or 'full'
# zstyle ':prezto:module:prompt' pwd-length 'short'

#
# Ruby
#

# Auto switch the Ruby version on directory change.
# zstyle ':prezto:module:ruby:chruby' auto-switch 'yes'

#
# Screen
#

# Auto start a session when Zsh is launched in a local terminal.
# zstyle ':prezto:module:screen:auto-start' local 'yes'

# Auto start a session when Zsh is launched in a SSH connection.
# zstyle ':prezto:module:screen:auto-start' remote 'yes'

#
# SSH
#

# Set the SSH identities to load into the agent.
# zstyle ':prezto:module:ssh:load' identities 'id_rsa' 'id_rsa2' 'id_github'

#
# Syntax Highlighting
#

# Set syntax highlighters.
# By default, only the main highlighter is enabled.
# zstyle ':prezto:module:syntax-highlighting' highlighters \
#   'main' \
#   'brackets' \
#   'pattern' \
#   'line' \
#   'cursor' \
#   'root'
#
# Set syntax highlighting styles.
# zstyle ':prezto:module:syntax-highlighting' styles \
#   'builtin' 'bg=blue' \
#   'command' 'bg=blue' \
#   'function' 'bg=blue'
#
# Set syntax pattern styles.
# zstyle ':prezto:module:syntax-highlighting' pattern \
#   'rm*-rf*' 'fg=white,bold,bg=red'

#
# Terminal
#

# Auto set the tab and window titles.
# zstyle ':prezto:module:terminal' auto-title 'yes'

# Set the window title format.
# zstyle ':prezto:module:terminal:window-title' format '%n@%m: %s'

# Set the tab title format.
# zstyle ':prezto:module:terminal:tab-title' format '%m: %s'

# Set the terminal multiplexer title format.
# zstyle ':prezto:module:terminal:multiplexer-title' format '%s'

#
# Tmux
#

# Auto start a session when Zsh is launched in a local terminal.
# zstyle ':prezto:module:tmux:auto-start' local 'yes'

# Auto start a session when Zsh is launched in a SSH connection.
# zstyle ':prezto:module:tmux:auto-start' remote 'yes'

# Integrate with iTerm2.
# zstyle ':prezto:module:tmux:iterm' integrate 'yes'

# Set the default session name:
# zstyle ':prezto:module:tmux:session' name 'YOUR DEFAULT SESSION NAME'

