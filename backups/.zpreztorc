# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
#
export CURRENTPROJECT="$HOME/workspace/tal/tal/services/mrd_integration/"
export STERN='stern --context kubernetes-admin@kubernetes'
export KUBE_UAT_NAMESPACE="wmstesting"
export KUBE_CRAIG_NAMESPACE="craig"
export OFFICE="kubectl --context kubernetes-admin@kubernetes"
export UAT="$OFFICE --namespace wmsuat"
export CK="$OFFICE --namespace $KUBE_CRAIG_NAMESPACE"
export WMSTESTING="$OFFICE --namespace $KUBE_UAT_NAMESPACE"
export MASTER="$OFFICE --namespace master"
export PIP_REQUIRE_VIRTUALENV=true
export TA=$HOME/workspace/dev-environments/kubernetes-environments/environment/roles/
export TP=$HOME/workspace/dev-environments/kubernetes-environments/environment/patches/development/
export CP=$HOME/workspace/cdev/kube/deployments
export PATH=$PATH:/opt/hub-linux-amd64-2.3.0-pre9/bin/
export PATH=$PATH:/opt/bin/
export PATCH=/home/craig/workspace/cdev/kube/patch.sh

alias branchinfo="cat $HOME/workspace/cdev/branches_reference"
alias branchinfoedit="vim $HOME/workspace/cdev/branches_reference"

alias vim=nvim
alias v=vim .
alias keys="vim $HOME/.vimkeys.vimrc"
alias keys="vim $HOME/keys.vimrc"
alias plug="vim $HOME/plug.vimrc"
alias dc=docker-compose
alias n="nautilus"
alias mbs="cd $HOME/git_repos/mybondsite/backend;"
#
#alias officek='kubectl --context kubernetes-admin@kubernetes'
alias ck="$CK"
alias wmstesting="$WMSTESTING"
alias ke="kubectl exec -i -t"
alias ka="kubectl attach -i -t"
alias office="$OFFICE"
alias wmsuat="$UAT"
alias master="$MASTER"

#watch network
alias watchnet="watch -n 1 'sudo netstat -tanop'"

#watching kubes
alias watch1="$HOME/workspace/cdev/kube/watch_kube.py kubectl"
#alias watch2="$HOME/workspace/cdev/kube/watch_kube.py '$CK'"

alias pods_wmstesting="watch -n 1 'kubectl --context kubernetes-admin@kubernetes --namespace wmstesting get pods'"

watch_wmstesting() {
  #sftp=$(kubectl --context kubernetes-admin@kubernetes --namespace wmstesting get pod -o name | grep sftp-wms | sed 's/pods\///')

  # give sftp in wmstesting so can copy files
  #$HOME/workspace/cdev/kube/watch_pods.py $WMSTESTING $sftp

  # watch logs for testing namespace tsin specific
  $HOME/workspace/cdev/kube/sterntsinconsumers.py wmstesting
}
watch_mini() {
  $HOME/workspace/cdev/kube/stern_local.py
  $HOME/workspace/cdev/kube/watch_pods.py kubectl
  exit
}

watch3() {
  #lsftp=$(kubectl get pod -o name | grep tsin-dimensions-sftp | sed 's/pods\///')
  sftp=$(kubectl --context kubernetes-admin@kubernetes --namespace wmsuat get pod -o name | grep sftp-wms | sed 's/pods\///')
  #poller=$(kubectl --context kubernetes-admin@kubernetes --namespace wmstesting get pod -o name | grep cub-poller | sed 's/pods\///')
  #if [[ -z $lsftp ]]
    #then
    #echo 'please make sure local tsin-dims sftp consumer is running'
  #fi
  #if [[ -z $sftp ]]
    #then
    #echo 'please make sure sftp is running in uat namespace : wmstesting'
  #fi
  #if [[ -z $poller ]]
    #then
    #echo 'please make sure cub poller is running in uat namespace'
  #fi
  $HOME/workspace/cdev/kube/watch_pods.py $UAT $sftp
# pass in namespace as first arg
  $HOME/workspace/cdev/kube/sterntsinconsumers.py wmsuat
}
start_code() {
  nohup hipchat4 &
  nohup chromium --new-window https://calendar.google.com/calendar/render
}
add_sftp_file(){
  #sftp=$(kubectl --context kubernetes-admin@kubernetes --namespace wmstesting get pod -o name | grep sftp-wms | sed 's/pods\///')
  #wmstesting exec -i -t $sftp -- bash -c "cp /tmp/CUB_TEST_001 /home/wms/data/TAL/CPT/output/$1"

  sshpass -e sftp -oBatchMode=no -b - takealot_uat_if@uatsftp.logfireapps.com
#sshpass -e sftp -oBatchMode=no -b - sftp-user@remote-host << !
   #cd incoming
   #put your-log-file.log
   #bye
#!
}

#run interactive
alias r1wms="kubectl run wms-service -i --tty --image 10.4.1.39:5000/takealot/tal-with-requirements:master --env='ROLE=KUBERNETES' -- bash -c '/usr/local/tal/tal/bin/gunicorn-docker-entry.sh \"tal.services.wms.server:application\"'"
#temp create c delete d for k8s:
alias c1adap="kubectl create -f $TA/adaptris-service"
alias d1adap="kubectl delete -f $TA/adaptris-service"
alias c1wms="cat $TA/wms-service/wms-deployment.yaml | sed 's|imagePullPolicy: Always|imagePullPolicy: IfNotPresent|' | kubectl create -f -; kubectl create -f $TA/wms-service/wms-service.yaml"
alias d1wms="kubectl delete -f $TA/wms-service"
alias c1dims="kubectl create -f $TA/s4f-dimension-processor-service/warehouse-tsin-dimensions-sftp-consumer-deployment.yaml"
alias d1dims="kubectl delete -f $TA/s4f-dimension-processor-service/warehouse-tsin-dimensions-sftp-consumer-deployment.yaml"
alias c1sftp="kubectl create -f $TA/sftp/"
alias d1sftp="kubectl delete -f $TA/sftp/"
alias c1kafka="kubectl create -f $TA/kafka/"
alias d1kafka="kubectl delete -f $TA/kafka/"
alias c1ingress="kubectl create -f $TA/ingress/"
alias d1ingress="kubectl delete -f $TA/ingress/"

alias c2wms="$CK create -f $TA/wms-service"
alias d2wms="$CK delete -f $TA/wms-service"
alias c2dims="$CK create -f $TA/s4f-dimension-processor-service/"
alias d2dims="$CK delete -f $TA/s4f-dimension-processor-service/"
alias c2sftp="$CK create -f $TA/sftp/"
alias d2sftp="$CK delete -f $TA/sftp/"

alias c3wms="$WMSTESTING create -f $TA/wms-service"
alias d3wms="$WMSTESTING delete -f $TA/wms-service"
alias c3dims="$WMSTESTING create -f $TA/s4f-dimension-processor-service/"
alias d3dims="$WMSTESTING delete -f $TA/s4f-dimension-processor-service/"
alias c3sftp="$WMSTESTING create -f $TA/sftp/"
alias d3sftp="$WMSTESTING delete -f $TA/sftp/"

#execute e temp
alias e1wms="kubectl run c-wms-shell --rm -i --tty --image 10.4.1.39:5000/takealot/tal-with-requirements -- bash"
#alias e1dims="kubectl run c-dims-shell --rm -i --tty --image 10.4.1.39:5000/takealot/s4f-dimension-processor:master -- bash"

#DEBUGGING DIMS
alias dec1dimssftp="kubectl create -f $CP/sftp-dimensions-consumer.yaml"
alias ded1dimssftp="kubectl delete -f $CP/sftp-dimensions-consumer.yaml"
alias dec1dimswmsapi="kubectl create -f $CP/wmsapi-dimensions-consumer.yaml"
alias ded1dimswmsapi="kubectl delete -f $CP/wmsapi-dimensions-consumer.yaml"
dee1dimssftp() {
  kubectl exec -i -t $1 -- bash -c "kafka_consumer --consumer_type tsin_dimensions_sftp"
}
dee1dimswmsapi() {
  kubectl exec -i -t $1 -- bash -c "kafka_consumer --consumer_type tsin_dimensions_wmsapi"
}
alias e1dims2166="kubectl run c-dims-shell --rm -i --tty --image 10.4.1.39:5000/takealot/warehouse_pack:master -- bash"

#
#patch
alias p1adap="$PATCH $TP/adaptris-deployment.yaml"
p1dims() {
  $PATCH $TP/s4f-dimension-processor/warehouse-tsin-dimensions-sftp-consumer-deployment.yaml
  $PATCH $TP/s4f-dimension-processor/warehouse-tsin-dimensions-wmsapi-consumerdeployment.yaml
}
#
#view v
alias vwms="cd $HOME/workspace/tal/tal/services/wms/"
alias vdims="cd $HOME/workspace/s4f-dimension-processor/;vim ."
alias vadap="cd $HOME/workspace/tal/tal/services/adaptris/;vim ."
alias vmrd="cd $HOME/workspace/tal/tal/services/mrd_integration/;vim ."
alias vkaf="cd $HOME/workspace/tal-kafka/;vim ."
alias kaf="cd $HOME/git_repos/kafka/code;"

alias k="kubectl"
alias ksetup="source <(kubectl completion zsh)"
alias kc="kubectl create"
alias kgp="kubectl get pods -owide --all-namespaces --show-all"
alias kdd="kubectl delete deployment"
alias minikubedockerexit='eval $(minikube docker-env -u)'
alias reload='exec $SHELL -l'
alias pj='cd ~/git_repos/psychicjenha/frontend'
alias tk='cd ~/workspace/dev-environments/kubernetes-environments'
alias set="source <(kubectl completion zsh)"
alias pa="pyenv activate data-science; python"
alias config="vim ~/.zpreztorc;"
alias python=ipython
alias edit='vim ~/.zpreztorc'
eval $(thefuck --alias f)
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

alias gitalias='vim $HOME/.zprezto/modules/git/alias.zsh'
alias gst="git status"
alias gp="git pull"
alias kafcreate='hello'
#patches to k8s
alias p1wms='$HOME/workspace/cdev/kube/patch.sh $TP/wms-deployment.yaml'

#temps
alias ipyvim='pyenv activate neovim3; ipython kernel; watch'
alias es='cd ~/workspace/tal_big_data/reports/2017-06_grad_big_data/'
alias sickd='cd ~/workspace/dev-environments/kubernetes-environments/environment/roles/s4f-sick-integration-service/'
alias adapt='cd ~/workspace/tal/tal/services/adaptris/test/;'
alias ss='cd ~/workspace/s4f-sick-integration-service/'
alias gogo='cd $HOME/git_repos/kafka/code && ./tal-commands.py'
alias prod="$CURRENTPROJECT;vim ."
#end temps
#
#
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
setopt correct
unsetopt correctall

zstyle ':prezto:load' pmodule \
         'environment' \
         'terminal' \
         'editor' \
         'history' \
         'directory' \
         'spectrum' \
         'utility' \
         'completion' \
         'git' \
         'syntax-highlighting' \
         'history-substring-search' \
         'prompt'
zstyle ':prezto:module:prompt' theme 'smiley'
savehelp() {
  echo "$@[2,-1]" >> $HOME/git_repos/craig_help/$1
}
pushtalbranchImage() {
  # get the git branch name
  cd $HOME/workspace/tal/
  export BRANCH=`git rev-parse --abbrev-ref HEAD`
  echo 'working on branch '$BRANCH
  # build the container
  export IMAGE_PATH="10.4.1.39:5000/takealot/tal-with-requirements:${BRANCH}"
  docker build -t ${IMAGE_PATH} -f Dockerfile .
  docker push ${IMAGE_PATH}
}
krun() {
  k run my-shell --rm -i --tty --image 10.4.1.39:5000/takealot/warehouse_pack:master -- bash -c " pip install pudb;export ROLE=KUBERNETES;export ENVIRONMENT=STAGING; kafka_consumer --consumer_type tsin_dimensions_sftp
"
}
krun2() {
  k exec -i --tty $1 -- bash -c "kafka_consumer --consumer_type tsin_dimensions_sftp
"
}
gac() {
  git add .
  git commit -m "{$@}"
}
ghist() {
	git log --oneline --graph --decorate --all
}
gc() {
  if [[ $1 -eq master ]]
    then
      git checkout master
    else
      git checkout WMS-"$@"
  fi

}
envv() {
  if [[ $# -eq 0 ]]
    then
      env
    else
      env | grep -i $1
  fi
}
kin () {
  kubectl run -i --tty temp --image=$1 --restart=Never -- sh
}
restartn() {
  sudo service networking restart;
  sudo service network-manager restart;
}
pullta() {
  a=$(git status | grep -c "modified")
  if [[ $a > 0 ]]
  then
    echo ''
    echo 'you have changes';
    echo ''
  else
    git pull
  fi
}

TESTD() {
  NAME=$(kubectl get pod -o name | grep dimensions | sed 's/pods\///')
  kubectl exec  $NAME -- bash -c "pip install pytest pudb unittest2 mock"
  kubectl exec -i -t $NAME -- bash -c "cd dimension_processor/tests;pytest -s -x --lf test_dimension_processor.py"
}
TESTMR() {
  #run deployment in minikube
  NAME=$(kubectl get pod -o name | grep mrd | sed 's/pods\///')
  kubectl exec  $NAME -- bash -c "pip install pytest pudb unittest2 mock"
  #run tests
  kubectl exec  $NAME -- bash -c "pytest services/tests/test_split_shipments.py"

  #expose pod
  #
  #curl endpoint with some data
}
TESTA() {
  $PATCH $TP/adaptris-deployment.yaml
  kubectl exec  $1 -- bash -c "pip install pytest pudb unittest2"
  kubectl exec -i -t $1 -- bash -c "cd tal/services/adaptris/test;pytest -s -x --lf test_adaptris_integration.py"
}
PROD() {
  cd $HOME/workspace/s4f-dimension-processor/dimension_processor
  gnome-terminal -e "bash -c './home/craig/workspace/cdev/patch.sh /home/craig/workspace/dev-environments/kubernetes-environments/environment/patches/development/s4f-dimension-processor/warehouse-tsin-dimensions-sftp-consumer-767482075-3qrz4'"
  kubectl exec  $1 -- bash -c "pip install pytest pudb unittest2"
  kubectl exec -i -t $1 -- bash -c "cd dimension_processor;pytest -x --lf -s tests/test_dimension_processor.py"
}
checkta() {
  for foldr in ~/workspace/*/;
    do
      cd foldr;
      echo "$foldr"
      git fetch;
      pullta
    done;
}

md() {
  eval $(minikube docker-env)
  minikube ssh "echo 'Domains=stagealot.com' | sudo tee -a /etc/systemd/resolved.conf"
  minikube ssh "sudo systemctl restart systemd-resolved.service"
}

dcc() {
  dc ps | grep Exit
}
dcu() {
  dc up -d --force-recreate $1
}
odev() {
cd workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/dev-environments/docker-environment/collections/shared/wms-staging/
}
dev() {
cd ~/workspace/cdev/$1
}

devup() {
cd ~/workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/cdev/$1
dc up --force-recreate;
}
h() {
  cd ~/git_repos/craig_help
  ls;
}
devad() {
cd ~/workspace/dev-environments/docker-environment/collections && source compose.env
cd ~/workspace/cdev/adaptris
dc exec adaptris pip install pytest pytest-watch;
dc exec adaptris bash -c 'cd tal/services/adaptris/test; ptw -- -x --lf;';
}

code-on() {
  git checkout -b $1 origin/master
}
jumpbox() {
  ssh-add
  ssh -A craigferguson@jump-box.takealot.com
}

gpush() {
  local branch=`git rev-parse --abbrev-ref HEAD`
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
  git push origin HEAD:$branch $@
}
gpr() {
  local branch=`git rev-parse --abbrev-ref HEAD`
#check tracking master
  #set following master
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
git branch --set-upstream-to=origin/master branch
  git push origin HEAD:$branch || return 1
  hub pull-request -h $branch
}
grelease() {
  local branch=`git rev-parse --abbrev-ref HEAD`
  [[ "$branch" == "master" ]] && echo "should be on feature branch" && return 1
  git pull --rebase || return 1
# squash your commits into sensible chunks
  git rebase -i
  git push origin HEAD:$branch -f || return 1
  git push origin HEAD:master || return 1
  git checkout master || return 1
  git push origin :$branch || return 1
  git branch -d $branch || return 1
}

# function that will compose two other commands
#kafka commands
KRun() {
  docker run --rm -it --net=host landoop/fast-data-dev bash -c -
}
KCreate() {
  cat "kafka-topics --zookeeper 127.0.0.1:2181 --create --topic $1 --partitions 3 --replication-factor 1" | sed 's_$1_'$1'_' | KRun -
}

# Auto convert .... to ../..
# zstyle ':prezto:module:editor' dot-expansion 'yes'

# Allow the zsh prompt context to be shown.
#zstyle ':prezto:module:editor' ps-context 'yes'

#
# Git
#

# Ignore submodules when they are 'dirty', 'untracked', 'all', or 'none'.
# zstyle ':prezto:module:git:status:ignore' submodules 'all'

#
# GNU Utility
#

# Set the command prefix on non-GNU systems.
# zstyle ':prezto:module:gnu-utility' prefix 'g'

#
# History Substring Search
#

# Set the query found color.
# zstyle ':prezto:module:history-substring-search:color' found ''

# Set the query not found color.
# zstyle ':prezto:module:history-substring-search:color' not-found ''

# Set the search globbing flags.
# zstyle ':prezto:module:history-substring-search' globbing-flags ''

#
# Pacman
#

# Set the Pacman frontend.
# zstyle ':prezto:module:pacman' frontend 'yaourt'

#
# Prompt
#

# Set the prompt theme to load.
# Setting it to 'random' loads a random theme.
# Auto set to 'off' on dumb terminals.

# Set how themes that use promptpwd function display the pwd, can be 'short', 'long', or 'full'
# zstyle ':prezto:module:prompt' pwd-length 'short'

#
# Ruby
#

# Auto switch the Ruby version on directory change.
# zstyle ':prezto:module:ruby:chruby' auto-switch 'yes'

#
# Screen
#

# Auto start a session when Zsh is launched in a local terminal.
# zstyle ':prezto:module:screen:auto-start' local 'yes'

# Auto start a session when Zsh is launched in a SSH connection.
# zstyle ':prezto:module:screen:auto-start' remote 'yes'

#
# SSH
#

# Set the SSH identities to load into the agent.
# zstyle ':prezto:module:ssh:load' identities 'id_rsa' 'id_rsa2' 'id_github'

#
# Syntax Highlighting
#

# Set syntax highlighters.
# By default, only the main highlighter is enabled.
# zstyle ':prezto:module:syntax-highlighting' highlighters \
#   'main' \
#   'brackets' \
#   'pattern' \
#   'line' \
#   'cursor' \
#   'root'
#
# Set syntax highlighting styles.
# zstyle ':prezto:module:syntax-highlighting' styles \
#   'builtin' 'bg=blue' \
#   'command' 'bg=blue' \
#   'function' 'bg=blue'
#
# Set syntax pattern styles.
# zstyle ':prezto:module:syntax-highlighting' pattern \
#   'rm*-rf*' 'fg=white,bold,bg=red'

#
# Terminal
#

# Auto set the tab and window titles.
# zstyle ':prezto:module:terminal' auto-title 'yes'

# Set the window title format.
# zstyle ':prezto:module:terminal:window-title' format '%n@%m: %s'

# Set the tab title format.
# zstyle ':prezto:module:terminal:tab-title' format '%m: %s'

# Set the terminal multiplexer title format.
# zstyle ':prezto:module:terminal:multiplexer-title' format '%s'

#
# Tmux
#

# Auto start a session when Zsh is launched in a local terminal.
# zstyle ':prezto:module:tmux:auto-start' local 'yes'

# Auto start a session when Zsh is launched in a SSH connection.
# zstyle ':prezto:module:tmux:auto-start' remote 'yes'

# Integrate with iTerm2.
# zstyle ':prezto:module:tmux:iterm' integrate 'yes'

# Set the default session name:
# zstyle ':prezto:module:tmux:session' name 'YOUR DEFAULT SESSION NAME'

